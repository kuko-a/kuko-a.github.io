<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>kuko</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on kuko</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>shaolong.chen@outlook.it (Shaolong Chen)</managingEditor>
    <webMaster>shaolong.chen@outlook.it (Shaolong Chen)</webMaster>
    <lastBuildDate>Sun, 16 Feb 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>markdown语法笔记</title>
      <link>http://localhost:1313/technology/fourth-post/</link>
      <pubDate>Sun, 16 Feb 2025 00:00:00 +0000</pubDate><author>shaolong.chen@outlook.it (Shaolong Chen)</author>
      <guid>http://localhost:1313/technology/fourth-post/</guid>
      <description>&lt;p&gt;markdown现在适用于大部分的场景，而且也没有什么门槛难度，在这里简单的总结一下文法以便于我之后随时可以查阅。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;基础语法&#34;&gt;基础语法&lt;/h2&gt;
&lt;p&gt;所用的markdown应用程序都支持基础语法元素，他们可以应付大多数情况下的日常所需元素。&lt;/p&gt;
&lt;h3 id=&#34;标题&#34;&gt;标题&lt;/h3&gt;
&lt;p&gt;在文本前面加入#号创建标题，#的数量是标题的级别，最多为六级标题。&lt;/p&gt;
&lt;h6 id=&#34;这是一个六级标题&#34;&gt;这是一个六级标题。&lt;/h6&gt;
&lt;h3 id=&#34;段落&#34;&gt;段落&lt;/h3&gt;
&lt;p&gt;可以用空白行来隔开两个文本段落，或者在一行的末尾添加空格后来用回车键换行。&lt;/p&gt;
&lt;p&gt;空白行间距展示&lt;/p&gt;
&lt;h3 id=&#34;文本&#34;&gt;文本&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在加粗文本两侧各添加两个* 来实现加粗，斜体显示是各一个*，同时使用就使用三个*。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;粗体&lt;/strong&gt;  &lt;em&gt;斜体&lt;/em&gt; &lt;em&gt;&lt;strong&gt;粗斜体&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果想显示原本用于格式化markdown文档的字符，在前面添加反斜杠\就可以正常显示。&lt;/li&gt;
&lt;li&gt;emoji表情需要使用相应的简码，这是&lt;a href=&#34;https://gist.github.com/rxaviers/7360908&#34;&gt;简码列表&lt;/a&gt;,可以随时查看。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;列表&#34;&gt;列表&lt;/h3&gt;
&lt;p&gt;在每个列表项前加入数字和英文点号，也可以加符号如-、*、+创建，首行缩进实现嵌套。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项
&lt;ul&gt;
&lt;li&gt;第一项&lt;/li&gt;
&lt;li&gt;第二项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;块&lt;/strong&gt;引用时在段落前添加&amp;gt;符号，采用&amp;gt; &amp;gt;符号来支持嵌套使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;引用一段话。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用一段话。&lt;/p&gt;&lt;/blockquote&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码&lt;/strong&gt;引用时在内容两侧各添加`来实现，如果代码中已经包含反引号要用双反引号。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;printf(&amp;quot;hello,world!&amp;quot;);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码块&lt;/strong&gt;引用时将每一行缩进一个制表符和两个空格。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;printf(&amp;quot;hello,world!&amp;quot;);
printf(&amp;quot;hello,world!&amp;quot;); 
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链接&#34;&gt;链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;超链接&lt;/strong&gt;是用中括号[]后跟着()的模式实现，文本在前，链接在后。也可以在圆括号中的链接地址后面添加以空格分隔的&amp;quot;&amp;ldquo;来使鼠标悬停后出现标题文字，加粗时要在整体前后加*，代码格式则是在方括号中加反引号`。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;a href=&#34;https://kuko-a.github.io/&#34; title=&#34;使用双引号&#34;&gt;我的blog&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;网址和Email地址&lt;/strong&gt;需要用&amp;lt; &amp;gt;来将URL或者email地址变成链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://kuko-a.github.io/&#34;&gt;https://kuko-a.github.io/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果链接过多可以使用双中括号[][]的模式给链接编号，然后统一使用 [编号]: 的格式补充链接。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[1]:https://kuko-a.github.io/&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;图片&lt;/strong&gt;的插入类似于链接，在中括号前需要加入!，图片链接放在圆括号中。给图片增加链接时给其整体括中括号，再添加圆括号。&lt;br&gt;
&lt;a href=&#34;https://kuko-a.github.io/&#34;&gt;&lt;img src=&#34;https://p.afbcs.cn/Gv64Ce&#34; alt=&#34;picture&#34;&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分割线&#34;&gt;分割线&lt;/h3&gt;
&lt;p&gt;创建分割线时在单独一行上使用三个或多个***，&amp;mdash;，___，来实现。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;扩展语法&#34;&gt;扩展语法&lt;/h2&gt;
&lt;p&gt;一般情况下，通过向兼容的markdown处理器添加扩展来启用这些元素。&lt;/p&gt;
&lt;h3 id=&#34;表格&#34;&gt;表格&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;建表&lt;/strong&gt;使用三个或多个连字符（&amp;mdash;）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;标题1&lt;/th&gt;
          &lt;th&gt;标题2&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;内容1&lt;/td&gt;
          &lt;td&gt;内容3&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;内容2&lt;/td&gt;
          &lt;td&gt;内容4&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对齐&lt;/strong&gt;对于表格中内容的格式对齐，在相应列的连字符左、右、两侧添加：来实现左侧、右侧或中心对齐。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;围栏代码块&#34;&gt;围栏代码块&lt;/h3&gt;
&lt;p&gt;在代码之前和之后的行上使用三个反引号```或三个波浪号~~~，在首段符号后可以添加语言名称&lt;/p&gt;






&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c&#34;&gt;1&lt;/span&gt;&lt;span&gt;&lt;span style=&#34;color:#89b4fa&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#a6e3a1&#34;&gt;&amp;#34;hello,world!&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;脚注&#34;&gt;脚注&lt;/h3&gt;
&lt;p&gt;脚注这里也类似于链接的操作，在方括号里&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;使用^和相应的数字，之后再去添加详解。&lt;/p&gt;
&lt;h3 id=&#34;example-1&#34;&gt;标题编号&lt;/h3&gt;
&lt;p&gt;对标题编号以便于直接链接到对应标题的位置，在标题相同行上用#标记后标明名称与序号并用大括号括起{#文本-序号}。&lt;br&gt;
链接时使用[标题名称](序号整体)来编辑。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>markdown现在适用于大部分的场景，而且也没有什么门槛难度，在这里简单的总结一下文法以便于我之后随时可以查阅。</p>
<hr>
<h2 id="基础语法">基础语法</h2>
<p>所用的markdown应用程序都支持基础语法元素，他们可以应付大多数情况下的日常所需元素。</p>
<h3 id="标题">标题</h3>
<p>在文本前面加入#号创建标题，#的数量是标题的级别，最多为六级标题。</p>
<h6 id="这是一个六级标题">这是一个六级标题。</h6>
<h3 id="段落">段落</h3>
<p>可以用空白行来隔开两个文本段落，或者在一行的末尾添加空格后来用回车键换行。</p>
<p>空白行间距展示</p>
<h3 id="文本">文本</h3>
<ul>
<li>在加粗文本两侧各添加两个* 来实现加粗，斜体显示是各一个*，同时使用就使用三个*。</li>
</ul>
<p><strong>粗体</strong>  <em>斜体</em> <em><strong>粗斜体</strong></em></p>
<ul>
<li>如果想显示原本用于格式化markdown文档的字符，在前面添加反斜杠\就可以正常显示。</li>
<li>emoji表情需要使用相应的简码，这是<a href="https://gist.github.com/rxaviers/7360908">简码列表</a>,可以随时查看。</li>
</ul>
<h3 id="列表">列表</h3>
<p>在每个列表项前加入数字和英文点号，也可以加符号如-、*、+创建，首行缩进实现嵌套。</p>
<ol>
<li>第一项</li>
<li>第二项
<ul>
<li>第一项</li>
<li>第二项</li>
</ul>
</li>
</ol>
<h3 id="引用">引用</h3>
<ul>
<li><strong>块</strong>引用时在段落前添加&gt;符号，采用&gt; &gt;符号来支持嵌套使用。</li>
</ul>
<blockquote>
<p>引用一段话。</p>
<blockquote>
<p>引用一段话。</p></blockquote></blockquote>
<ul>
<li><strong>代码</strong>引用时在内容两侧各添加`来实现，如果代码中已经包含反引号要用双反引号。</li>
</ul>
<p><code>printf(&quot;hello,world!&quot;);</code></p>
<ul>
<li>
<p><strong>代码块</strong>引用时将每一行缩进一个制表符和两个空格。</p>
<pre><code>printf(&quot;hello,world!&quot;);
printf(&quot;hello,world!&quot;); 
</code></pre>
</li>
</ul>
<h3 id="链接">链接</h3>
<ul>
<li><strong>超链接</strong>是用中括号[]后跟着()的模式实现，文本在前，链接在后。也可以在圆括号中的链接地址后面添加以空格分隔的&quot;&ldquo;来使鼠标悬停后出现标题文字，加粗时要在整体前后加*，代码格式则是在方括号中加反引号`。</li>
</ul>
<p><em><strong><a href="https://kuko-a.github.io/" title="使用双引号">我的blog</a></strong></em></p>
<ul>
<li><strong>网址和Email地址</strong>需要用&lt; &gt;来将URL或者email地址变成链接。</li>
</ul>
<p><a href="https://kuko-a.github.io/">https://kuko-a.github.io/</a></p>
<ul>
<li>如果链接过多可以使用双中括号[][]的模式给链接编号，然后统一使用 [编号]: 的格式补充链接。</li>
</ul>
<p>[1]:https://kuko-a.github.io/</p>
<ul>
<li><strong>图片</strong>的插入类似于链接，在中括号前需要加入!，图片链接放在圆括号中。给图片增加链接时给其整体括中括号，再添加圆括号。<br>
<a href="https://kuko-a.github.io/"><img src="https://p.afbcs.cn/Gv64Ce" alt="picture"></a></li>
</ul>
<h3 id="分割线">分割线</h3>
<p>创建分割线时在单独一行上使用三个或多个***，&mdash;，___，来实现。</p>
<hr>
<h2 id="扩展语法">扩展语法</h2>
<p>一般情况下，通过向兼容的markdown处理器添加扩展来启用这些元素。</p>
<h3 id="表格">表格</h3>
<ul>
<li><strong>建表</strong>使用三个或多个连字符（&mdash;）创建每列的标题，并使用管道（|）分隔每列。您可以选择在表的任一端添加管道。</li>
</ul>
<table>
  <thead>
      <tr>
          <th>标题1</th>
          <th>标题2</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>内容1</td>
          <td>内容3</td>
      </tr>
      <tr>
          <td>内容2</td>
          <td>内容4</td>
      </tr>
  </tbody>
</table>
<ul>
<li><strong>对齐</strong>对于表格中内容的格式对齐，在相应列的连字符左、右、两侧添加：来实现左侧、右侧或中心对齐。</li>
</ul>
<h3 id="围栏代码块">围栏代码块</h3>
<p>在代码之前和之后的行上使用三个反引号```或三个波浪号~~~，在首段符号后可以添加语言名称</p>






<div class="highlight"><pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1</span><span><span style="color:#89b4fa">printf</span>(<span style="color:#a6e3a1">&#34;hello,world!&#34;</span>);</span></span></code></pre></div>
<h3 id="脚注">脚注</h3>
<p>脚注这里也类似于链接的操作，在方括号里<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>使用^和相应的数字，之后再去添加详解。</p>
<h3 id="example-1">标题编号</h3>
<p>对标题编号以便于直接链接到对应标题的位置，在标题相同行上用#标记后标明名称与序号并用大括号括起{#文本-序号}。<br>
链接时使用[标题名称](序号整体)来编辑。</p>
<p><a href="#example-1">标题编号</a></p>
<h3 id="删除线">删除线</h3>
<p>在文本的前后使用两个波浪号~实现。</p>
<p><del>这是一段错误</del></p>
<h3 id="复选框">复选框</h3>
<p>在列表项前加破折号-和方括号[]，在方括号前加上空格。</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> 任务一</li>
<li><input checked="" disabled="" type="checkbox"> 任务二</li>
<li>[] 任务三</li>
</ul>
<h2 id="写在最后">写在最后</h2>
<p>要把有用的部分放入technology模块之中，弄好生态很重要。</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>这是一个脚注&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    <item>
      <title>对拿来主义的看法</title>
      <link>http://localhost:1313/life/third-post/</link>
      <pubDate>Sat, 15 Feb 2025 00:00:00 +0000</pubDate><author>shaolong.chen@outlook.it (Shaolong Chen)</author>
      <guid>http://localhost:1313/life/third-post/</guid>
      <description>&lt;p&gt;获得想法&amp;ndash;&amp;gt;阅读文本&amp;ndash;&amp;gt;配置环境&amp;ndash;&amp;gt;搬运示例代码&amp;ndash;&amp;gt;修改代码，我陷入了死循环。&lt;/p&gt;
&lt;h3 id=&#34;拿来主义&#34;&gt;拿来主义&lt;/h3&gt;
&lt;p&gt;把blog托管在github云端之后，我有了一种如释重负的感觉，好像完成了一个大工程一样。我冷静下来想了想，实际上我什么也没有做。hugo不是我研发的，theme不是我架构的，markdown也是别人的设计的工具，我只是个拿来主义。&lt;br&gt;
在巨人的肩膀上沾沾自喜不是一个技术人的作风，充其量也只算个脚本小子。但是很多网友告诉我，倘若你自己从头开始一个字母一个字母的造轮子，造一辈子都没有结果，更何况现在有了ai这个工具，你甚至不需要去自己敲代码都可以完成一些项目。实际上，确实如此，ai已经学习了几乎所有已公开的代码。&lt;br&gt;
为什么会拿来主义呢？事实上，我认为所谓“拿来”就是学习的过程。就像没有人会去嘲弄小学生学习九九乘法表，也没有小学生会费心思去研究新的计算方法一样，因为计算今天的伙食费实在是用不上牛顿所研究的微积分。工具之所以拥有价值，是因为有人去使用它。也就是说，好用的工具、适合的方法都尽管去拿，这是一个学习的过程。&lt;/p&gt;
&lt;h4 id=&#34;存在的问题&#34;&gt;存在的问题&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;知识付费问题：使用其他人的研究成果、享受其他人的服务，然后支付相应的费用，这是一种常识。2016年被称为知识付费元年，越来越多人乐意去支付金钱从而获得相应的服务。这是一种对他人劳动行为的尊重，然而互联网成立的初衷就是互联互享，有太多人乐意在他们的社区上分享技术，一起交流。在Google上随便键入一段代码报错，绝对会有人已经在很久之前给出解法。可见，目前知识付费在互联网上的形式大多流于服务付费。想去学习一门新的技术往往要去请一个好的先生来教，所支付的费用则是成了学费。知识付费很难去界定限度，也不可能去做到硬性要求。&lt;/li&gt;
&lt;li&gt;思维惰性问题：学而不思则罔，一味的拿来别人的思考成果只会让我陷入懒惰的漩涡。这种问题很难去避免，因为现在网络上现成的代码实在是目不暇接，我的同学们在完成学校布置的任务时，有太多人直接复制粘贴网络上的答案然后提交，结果固然是好的，他们顺利通过了作业审查。这样的事情多了之后，很难再去建立从头敲代码的信心，学会去修改其他人的代码已经算是勤快的了。我也经常会在一些问题上面犯懒，但是如果把所有的问题都丢给其他人或者ai，那么这个坎永远也迈不过去。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;一些想法&#34;&gt;一些想法&lt;/h3&gt;
&lt;p&gt;我在想着如何做一个好的拿来主义者，所以我在编写web代码之前，试着查看了万维网的工作原理。&lt;br&gt;
在我读完文本之后，直观的感受是学到了一大堆的专有名词，有种在学习语文的实感。显然学习这些是个长久的事情，我认为我有必要去学习这些原理。遇到新问题直接去复制粘贴，直接去拿，是没有办法做到真正的学习。我建立我的blog的初衷也是去记录我的问题，希望我以后能对原理多加考虑，对原因多加思考。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>获得想法&ndash;&gt;阅读文本&ndash;&gt;配置环境&ndash;&gt;搬运示例代码&ndash;&gt;修改代码，我陷入了死循环。</p>
<h3 id="拿来主义">拿来主义</h3>
<p>把blog托管在github云端之后，我有了一种如释重负的感觉，好像完成了一个大工程一样。我冷静下来想了想，实际上我什么也没有做。hugo不是我研发的，theme不是我架构的，markdown也是别人的设计的工具，我只是个拿来主义。<br>
在巨人的肩膀上沾沾自喜不是一个技术人的作风，充其量也只算个脚本小子。但是很多网友告诉我，倘若你自己从头开始一个字母一个字母的造轮子，造一辈子都没有结果，更何况现在有了ai这个工具，你甚至不需要去自己敲代码都可以完成一些项目。实际上，确实如此，ai已经学习了几乎所有已公开的代码。<br>
为什么会拿来主义呢？事实上，我认为所谓“拿来”就是学习的过程。就像没有人会去嘲弄小学生学习九九乘法表，也没有小学生会费心思去研究新的计算方法一样，因为计算今天的伙食费实在是用不上牛顿所研究的微积分。工具之所以拥有价值，是因为有人去使用它。也就是说，好用的工具、适合的方法都尽管去拿，这是一个学习的过程。</p>
<h4 id="存在的问题">存在的问题</h4>
<ol>
<li>知识付费问题：使用其他人的研究成果、享受其他人的服务，然后支付相应的费用，这是一种常识。2016年被称为知识付费元年，越来越多人乐意去支付金钱从而获得相应的服务。这是一种对他人劳动行为的尊重，然而互联网成立的初衷就是互联互享，有太多人乐意在他们的社区上分享技术，一起交流。在Google上随便键入一段代码报错，绝对会有人已经在很久之前给出解法。可见，目前知识付费在互联网上的形式大多流于服务付费。想去学习一门新的技术往往要去请一个好的先生来教，所支付的费用则是成了学费。知识付费很难去界定限度，也不可能去做到硬性要求。</li>
<li>思维惰性问题：学而不思则罔，一味的拿来别人的思考成果只会让我陷入懒惰的漩涡。这种问题很难去避免，因为现在网络上现成的代码实在是目不暇接，我的同学们在完成学校布置的任务时，有太多人直接复制粘贴网络上的答案然后提交，结果固然是好的，他们顺利通过了作业审查。这样的事情多了之后，很难再去建立从头敲代码的信心，学会去修改其他人的代码已经算是勤快的了。我也经常会在一些问题上面犯懒，但是如果把所有的问题都丢给其他人或者ai，那么这个坎永远也迈不过去。</li>
</ol>
<h3 id="一些想法">一些想法</h3>
<p>我在想着如何做一个好的拿来主义者，所以我在编写web代码之前，试着查看了万维网的工作原理。<br>
在我读完文本之后，直观的感受是学到了一大堆的专有名词，有种在学习语文的实感。显然学习这些是个长久的事情，我认为我有必要去学习这些原理。遇到新问题直接去复制粘贴，直接去拿，是没有办法做到真正的学习。我建立我的blog的初衷也是去记录我的问题，希望我以后能对原理多加考虑，对原因多加思考。</p>
]]></content:encoded>
    </item>
    <item>
      <title>个人blog的基本建立</title>
      <link>http://localhost:1313/life/first-post/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate><author>shaolong.chen@outlook.it (Shaolong Chen)</author>
      <guid>http://localhost:1313/life/first-post/</guid>
      <description>&lt;h4 id=&#34;写在前面&#34;&gt;写在前面&lt;/h4&gt;
&lt;p&gt;感谢&lt;a href=&#34;https://blog.yuanji.dev/about/&#34;&gt;Yuanji&amp;rsquo;s Blog&lt;/a&gt;，他给了我建立blog的灵感。&lt;br&gt;
花了两天时间自己摸索了一下blog的模式，跌跌撞撞的写了点东西，也算是一个新开端。&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;ai会给你答案&#34;&gt;ai会给你答案&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在不久的过去，想做一个属于自己的blog不难，但免不了劳神。但是现在ai为这个过程实现了巨大的提速。&lt;strong&gt;谁快，谁就领先。&lt;/strong&gt;&lt;br&gt;
我试着用了一下春节期间的明星国产ai：deepseek，对比于我之前使用的chatgpt来讲，他们有共同的缺点就是服务器网络不太稳定。前者是在国内太过火爆，后者则是服务器不在国内。总而言之，他们给予我的震撼是无比附加的。&lt;br&gt;
我在小时候有过这样的畅想：&lt;strong&gt;假如我有一个朋友，他无所不能且无话不说&lt;/strong&gt;，而现在ai扮演的就是这个角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;blog建立的进程&#34;&gt;blog建立的进程&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;基本框架的构建&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;deepseek给我整合了很多开源的个人博客框架，我选择了hugo，他可以托管在github上面并且较为轻量化，对于云端的数据我往往更放心。&lt;br&gt;
沿用ai的建议顺利安装了hugo之后，我在主题的应用上面绕了点弯路，但是最终还是成功导入了心仪的主题。我好像常常这样，在度过难关之后就会觉得之前的坎坷不值一提。我不太明白这到底是一种自谦还是自傲。&lt;br&gt;
导入主题之后，我试着运行 hugo serve 并且在本地文档中编辑，然而并没有收到网页上的即时反馈。deepseek再次伸出援手，它给了我十余种可能出现的错误，排查到第七种网页路径问题时，我成功的在edge上看到了我编辑的实时状况。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;拓展衍生的问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;markdown文档的编写，hugo仅读取markdown格式的文档，而我之前仅仅接触过word的编辑，事实上我连word的应用也只懂些皮毛。b站上的markdown教程解决了这个问题，ai更倾向于给出一份标准答案而不是一份详解。起码在markdown的教学方面，deepseek仅仅是给我抛来一本厚重的新华词典，很难有人将它从头看到尾并且熟练背诵。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;主题的更换，我使用的simple主题是从hugo官网中直接引用的，我试着更换不同主题来实现相同文档的呈现，结果是出现了很多兼容问题。&lt;br&gt;
我试着用paper主题来替换simple主题，但是poweshell无法运行hugo serve，报错显示是Google Analytics的错误，这次ai也没有帮我解决问题，原因在于我实际上并不刚需分析功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;仍旧遗留的问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;没有熟悉对主题的应用与改进，这就有关于编写，这是一个长期的进程，这需要我进行更为系统、长久的前端Web开发学习，我喜欢在&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Learn_web_development&#34;&gt;MDN&lt;/a&gt;上学习新东西。
这是一个友好且有用的社区。&lt;br&gt;
没有解决在github托管的问题，就先暂存在本地，争取在22号开学前实现个人blog的基础功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h4 id=&#34;一些收获&#34;&gt;一些收获&lt;/h4&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;写blog和编程不一样，bug可以明天再修，但是明天写的blog和今天写的blog无法混为一谈，而这是一件很酷的事情。&lt;br&gt;
当一大段拉丁字母呈现在眼前时，English的学习重要性不言而喻。我在主题的学习使用过程中深有体会，simple并不是很复杂的存在，学会正确阅读使用说明书是一件了不起的事。&lt;br&gt;
deepseek在整个过程中给予了我不少帮助，我相信未来肯定会衍生出更多的功能。在10年前没有人会想到移动电话会改变人的生活模式，我认为ai也一样拥有这样的潜力。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h4 id="写在前面">写在前面</h4>
<p>感谢<a href="https://blog.yuanji.dev/about/">Yuanji&rsquo;s Blog</a>，他给了我建立blog的灵感。<br>
花了两天时间自己摸索了一下blog的模式，跌跌撞撞的写了点东西，也算是一个新开端。</p>
<hr>
<ul>
<li>
<h4 id="ai会给你答案">ai会给你答案</h4>
</li>
</ul>
<p>在不久的过去，想做一个属于自己的blog不难，但免不了劳神。但是现在ai为这个过程实现了巨大的提速。<strong>谁快，谁就领先。</strong><br>
我试着用了一下春节期间的明星国产ai：deepseek，对比于我之前使用的chatgpt来讲，他们有共同的缺点就是服务器网络不太稳定。前者是在国内太过火爆，后者则是服务器不在国内。总而言之，他们给予我的震撼是无比附加的。<br>
我在小时候有过这样的畅想：<strong>假如我有一个朋友，他无所不能且无话不说</strong>，而现在ai扮演的就是这个角色。</p>
<ul>
<li>
<h4 id="blog建立的进程">blog建立的进程</h4>
</li>
</ul>
<ol>
<li>基本框架的构建</li>
</ol>
<p>deepseek给我整合了很多开源的个人博客框架，我选择了hugo，他可以托管在github上面并且较为轻量化，对于云端的数据我往往更放心。<br>
沿用ai的建议顺利安装了hugo之后，我在主题的应用上面绕了点弯路，但是最终还是成功导入了心仪的主题。我好像常常这样，在度过难关之后就会觉得之前的坎坷不值一提。我不太明白这到底是一种自谦还是自傲。<br>
导入主题之后，我试着运行 hugo serve 并且在本地文档中编辑，然而并没有收到网页上的即时反馈。deepseek再次伸出援手，它给了我十余种可能出现的错误，排查到第七种网页路径问题时，我成功的在edge上看到了我编辑的实时状况。</p>
<ol start="2">
<li>
<p>拓展衍生的问题</p>
<ul>
<li>markdown文档的编写，hugo仅读取markdown格式的文档，而我之前仅仅接触过word的编辑，事实上我连word的应用也只懂些皮毛。b站上的markdown教程解决了这个问题，ai更倾向于给出一份标准答案而不是一份详解。起码在markdown的教学方面，deepseek仅仅是给我抛来一本厚重的新华词典，很难有人将它从头看到尾并且熟练背诵。</li>
</ul>
<ul>
<li>主题的更换，我使用的simple主题是从hugo官网中直接引用的，我试着更换不同主题来实现相同文档的呈现，结果是出现了很多兼容问题。<br>
我试着用paper主题来替换simple主题，但是poweshell无法运行hugo serve，报错显示是Google Analytics的错误，这次ai也没有帮我解决问题，原因在于我实际上并不刚需分析功能。</li>
</ul>
</li>
<li>
<p>仍旧遗留的问题</p>
</li>
</ol>
<p>没有熟悉对主题的应用与改进，这就有关于编写，这是一个长期的进程，这需要我进行更为系统、长久的前端Web开发学习，我喜欢在<a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development">MDN</a>上学习新东西。
这是一个友好且有用的社区。<br>
没有解决在github托管的问题，就先暂存在本地，争取在22号开学前实现个人blog的基础功能。</p>
<ul>
<li>
<h4 id="一些收获">一些收获</h4>
</li>
</ul>
<p>写blog和编程不一样，bug可以明天再修，但是明天写的blog和今天写的blog无法混为一谈，而这是一件很酷的事情。<br>
当一大段拉丁字母呈现在眼前时，English的学习重要性不言而喻。我在主题的学习使用过程中深有体会，simple并不是很复杂的存在，学会正确阅读使用说明书是一件了不起的事。<br>
deepseek在整个过程中给予了我不少帮助，我相信未来肯定会衍生出更多的功能。在10年前没有人会想到移动电话会改变人的生活模式，我认为ai也一样拥有这样的潜力。</p>
]]></content:encoded>
    </item>
    <item>
      <title>关于宅的感受</title>
      <link>http://localhost:1313/life/second-post/</link>
      <pubDate>Thu, 13 Feb 2025 00:00:00 +0000</pubDate><author>shaolong.chen@outlook.it (Shaolong Chen)</author>
      <guid>http://localhost:1313/life/second-post/</guid>
      <description>&lt;h3 id=&#34;经历&#34;&gt;经历&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;初次见面&#34;&gt;初次见面&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我差不多从小学四年级就开始接触漫画，其中&lt;a href=&#34;https://baike.baidu.com/item/%E9%98%BF%E8%A1%B0on%20line/9641348?fromModule=lemma_inlink&#34;&gt;《阿衰》&lt;/a&gt;和&lt;a href=&#34;https://baike.baidu.com/item/%E5%81%B7%E6%98%9F%E4%B9%9D%E6%9C%88%E5%A4%A9/8793748&#34;&gt;《偷星九月天》&lt;/a&gt;留给了我很深刻的印象，这是实体书给我的感觉。&lt;br&gt;
就实体书的话，事实上我没有完整的读完这两部书，假使缘由是购买漫画书
而不是教科书的话，没有多少父母会乐意去花钱做这种事情。然而高速发展的互联网技术让我在这方面没有拉下多少，我在智能手机上完整的看完了&lt;a href=&#34;https://baike.baidu.com/item/%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85/8702&#34;&gt;ナルト&lt;/a&gt;，这既是我文娱方向的第一次探索，也是我对网络世界的第一次触摸。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;重拾记忆&#34;&gt;重拾记忆&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然小学我对漫画稍有涉猎，但是却远远没有达到沉沦的地步。至于二次元动漫小人再次闯进我的生活就是高中时代了，我的一个同学是这方面的老手，我和他交谈甚欢，同时&lt;a href=&#34;https://baike.baidu.com/item/%E5%8E%9F%E7%A5%9E/23583622&#34;&gt;《原神》&lt;/a&gt;也在这一年开始了公开测试，我试着去玩了玩这个所谓的剑与魔法的世界。虽然整体体验并没有什么剑与魔法，但是这种新颖的样式吸引我继续玩到了现在。&lt;br&gt;
与此同时，讲述青春故事的番剧也列上了我业余生活的名单。高中的课业也足够繁忙，我没有放弃看一些有趣的番剧，同弹幕一起享受着虚构的、美好的世界。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&#34;目前境遇&#34;&gt;目前境遇&lt;/h5&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上了大学之后，我基本很少去专门搜索番剧去花时间去观看。接触了一些热门的&lt;a href=&#34;https://baike.baidu.com/item/GALgame/423361&#34;&gt;Galgame&lt;/a&gt;，总体的感觉是青春靓丽的，但是很难称得上是一种爱好，因为所要耗费的时间实在算不上短，在去年的暑期，我发现了vtuber这种职业，从业者依靠vtube stadio来控制自己的虚拟形象，也就是二次元动漫小人，使用自己的声音来“驾驶”这些虚拟形象，实现了直播的效果，所以观众们也可以通过弹幕的形式来实现与这个动漫小人，也就是和vtuber直接的实时互动。这种介于虚拟与现实之间的感觉很迷人，我现在仍然关注着这个行业，也有着固定看的人。我自我感觉目前很难去投入大段的时间去感悟事情，短时间的即时反馈在愉悦领域占有绝对的优势，在这其中被动的接受模式尤为吃香。直播刚好兼顾两头。&lt;/p&gt;
&lt;h3 id=&#34;感受&#34;&gt;感受&lt;/h3&gt;
&lt;p&gt;我算宅吗？或许不算，入宅和脱宅是人为的自我定义，二次元动漫小人也算是我的一种寄托，现在偶尔看看短篇漫画，看看vtuber小人在屏幕里面闹腾，看看缥缈的轻小说，现实生活有太多的事情要去花费大段的时间，很难去说虚拟与现实之间所相差的距离和美好的区别，但是比起虚拟的痛苦，现实的痛苦更加难熬。我会看动漫小人多久呢，我不清楚，所有人的时间是有限的，我希望未来能尽量去做自己感兴趣的事情和业务，学习更多的技术，在擅长的领域去做更多有趣的事情、创造更多的美好。&lt;/p&gt;</description>
      <content:encoded><![CDATA[<h3 id="经历">经历</h3>
<ul>
<li>
<h5 id="初次见面">初次见面</h5>
</li>
</ul>
<p>我差不多从小学四年级就开始接触漫画，其中<a href="https://baike.baidu.com/item/%E9%98%BF%E8%A1%B0on%20line/9641348?fromModule=lemma_inlink">《阿衰》</a>和<a href="https://baike.baidu.com/item/%E5%81%B7%E6%98%9F%E4%B9%9D%E6%9C%88%E5%A4%A9/8793748">《偷星九月天》</a>留给了我很深刻的印象，这是实体书给我的感觉。<br>
就实体书的话，事实上我没有完整的读完这两部书，假使缘由是购买漫画书
而不是教科书的话，没有多少父母会乐意去花钱做这种事情。然而高速发展的互联网技术让我在这方面没有拉下多少，我在智能手机上完整的看完了<a href="https://baike.baidu.com/item/%E7%81%AB%E5%BD%B1%E5%BF%8D%E8%80%85/8702">ナルト</a>，这既是我文娱方向的第一次探索，也是我对网络世界的第一次触摸。</p>
<ul>
<li>
<h5 id="重拾记忆">重拾记忆</h5>
</li>
</ul>
<p>虽然小学我对漫画稍有涉猎，但是却远远没有达到沉沦的地步。至于二次元动漫小人再次闯进我的生活就是高中时代了，我的一个同学是这方面的老手，我和他交谈甚欢，同时<a href="https://baike.baidu.com/item/%E5%8E%9F%E7%A5%9E/23583622">《原神》</a>也在这一年开始了公开测试，我试着去玩了玩这个所谓的剑与魔法的世界。虽然整体体验并没有什么剑与魔法，但是这种新颖的样式吸引我继续玩到了现在。<br>
与此同时，讲述青春故事的番剧也列上了我业余生活的名单。高中的课业也足够繁忙，我没有放弃看一些有趣的番剧，同弹幕一起享受着虚构的、美好的世界。</p>
<ul>
<li>
<h5 id="目前境遇">目前境遇</h5>
</li>
</ul>
<p>上了大学之后，我基本很少去专门搜索番剧去花时间去观看。接触了一些热门的<a href="https://baike.baidu.com/item/GALgame/423361">Galgame</a>，总体的感觉是青春靓丽的，但是很难称得上是一种爱好，因为所要耗费的时间实在算不上短，在去年的暑期，我发现了vtuber这种职业，从业者依靠vtube stadio来控制自己的虚拟形象，也就是二次元动漫小人，使用自己的声音来“驾驶”这些虚拟形象，实现了直播的效果，所以观众们也可以通过弹幕的形式来实现与这个动漫小人，也就是和vtuber直接的实时互动。这种介于虚拟与现实之间的感觉很迷人，我现在仍然关注着这个行业，也有着固定看的人。我自我感觉目前很难去投入大段的时间去感悟事情，短时间的即时反馈在愉悦领域占有绝对的优势，在这其中被动的接受模式尤为吃香。直播刚好兼顾两头。</p>
<h3 id="感受">感受</h3>
<p>我算宅吗？或许不算，入宅和脱宅是人为的自我定义，二次元动漫小人也算是我的一种寄托，现在偶尔看看短篇漫画，看看vtuber小人在屏幕里面闹腾，看看缥缈的轻小说，现实生活有太多的事情要去花费大段的时间，很难去说虚拟与现实之间所相差的距离和美好的区别，但是比起虚拟的痛苦，现实的痛苦更加难熬。我会看动漫小人多久呢，我不清楚，所有人的时间是有限的，我希望未来能尽量去做自己感兴趣的事情和业务，学习更多的技术，在擅长的领域去做更多有趣的事情、创造更多的美好。</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
